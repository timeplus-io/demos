apiVersion: v1
kind: Namespace
metadata:
  name: clickhouse
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-config
  namespace: clickhouse
data:
  config.xml: |
    <?xml version="1.0"?>
    <clickhouse>
        <logger>
            <level>information</level>
            <console>true</console>
        </logger>
        
        <http_port>8123</http_port>
        <tcp_port>9000</tcp_port>
        <listen_host>0.0.0.0</listen_host>
        
        <max_connections>4096</max_connections>
        <keep_alive_timeout>3</keep_alive_timeout>
        <max_concurrent_queries>100</max_concurrent_queries>
        <uncompressed_cache_size>8589934592</uncompressed_cache_size>
        <mark_cache_size>5368709120</mark_cache_size>
        
        <path>/var/lib/clickhouse/</path>
        <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>
        <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>
        <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>
        
        <default_profile>default</default_profile>
        <default_database>default</default_database>
        
        <timezone>UTC</timezone>
        <mlock_executable>false</mlock_executable>
    </clickhouse>

  users.xml: |
    <?xml version="1.0"?>
    <clickhouse>
        <profiles>
            <default>
                <max_memory_usage>10000000000</max_memory_usage>
                <use_uncompressed_cache>0</use_uncompressed_cache>
                <load_balancing>random</load_balancing>
            </default>
            
            <readonly>
                <max_memory_usage>10000000000</max_memory_usage>
                <use_uncompressed_cache>0</use_uncompressed_cache>
                <load_balancing>random</load_balancing>
                <readonly>1</readonly>
            </readonly>
        </profiles>
        
        <users>
            <default>
                <password>Password!</password>
                <networks incl="networks_config" />
                <profile>admin</profile>
                <quota>default</quota>
                <access_management>1</access_management>
            </default>
            
            <readonly>
                <password>demo123</password>
                <networks incl="networks_config" />
                <profile>demo</profile>
                <quota>default</quota>
            </readonly>
        </users>
        
        <quotas>
            <default>
                <interval>
                    <duration>3600</duration>
                    <queries>0</queries>
                    <errors>0</errors>
                    <result_rows>0</result_rows>
                    <read_rows>0</read_rows>
                    <execution_time>0</execution_time>
                </interval>
            </default>
        </quotas>
    </clickhouse>

  networks.xml: |
    <?xml version="1.0"?>
    <clickhouse>
        <networks_config>
            <ip>::/0</ip>
        </networks_config>
    </clickhouse>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickhouse
  namespace: clickhouse
  labels:
    app: clickhouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clickhouse
  template:
    metadata:
      labels:
        app: clickhouse
    spec:
      containers:
      - name: clickhouse
        image: clickhouse/clickhouse-server:latest
        ports:
        - containerPort: 8123
          name: http
        - containerPort: 9000
          name: native
        volumeMounts:
        - name: clickhouse-data
          mountPath: /var/lib/clickhouse
        - name: clickhouse-config
          mountPath: /etc/clickhouse-server/config.xml
          subPath: config.xml
        - name: clickhouse-config
          mountPath: /etc/clickhouse-server/users.xml
          subPath: users.xml
        - name: clickhouse-config
          mountPath: /etc/clickhouse-server/config.d/networks.xml
          subPath: networks.xml
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /ping
            port: 8123
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ping
            port: 8123
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: clickhouse-data
        persistentVolumeClaim:
          claimName: clickhouse-pvc
      - name: clickhouse-config
        configMap:
          name: clickhouse-config

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clickhouse-pvc
  namespace: clickhouse
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-service
  namespace: clickhouse
spec:
  selector:
    app: clickhouse
  ports:
  - name: http
    port: 8123
    targetPort: 8123
  - name: native
    port: 9000
    targetPort: 9000
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-play-html
  namespace: clickhouse
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>ClickHouse Query Interface</title>
        <meta charset="utf-8">
        <style>
            * { box-sizing: border-box; }
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                margin: 0; padding: 20px; 
                background: #f5f5f5;
            }
            .container { 
                max-width: 1400px; 
                margin: 0 auto; 
                background: white; 
                border-radius: 8px; 
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                padding: 30px;
            }
            h1 { 
                color: #333; 
                margin-bottom: 30px; 
                border-bottom: 2px solid #007acc;
                padding-bottom: 10px;
            }
            .query-section {
                margin-bottom: 20px;
            }
            .query-header {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 10px;
            }
            .query-examples {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
                margin-bottom: 10px;
            }
            .example-btn {
                padding: 5px 10px;
                background: #e7f3ff;
                border: 1px solid #007acc;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                color: #007acc;
            }
            .example-btn:hover {
                background: #007acc;
                color: white;
            }
            textarea { 
                width: 100%; 
                height: 200px; 
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                font-size: 14px;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 6px;
                resize: vertical;
                outline: none;
            }
            textarea:focus {
                border-color: #007acc;
            }
            .button-group {
                display: flex;
                gap: 10px;
                align-items: center;
                margin: 20px 0;
            }
            button { 
                padding: 12px 24px; 
                font-size: 14px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.2s;
            }
            .execute-btn {
                background: #007acc;
                color: white;
            }
            .execute-btn:hover {
                background: #0066aa;
            }
            .clear-btn {
                background: #6c757d;
                color: white;
            }
            .clear-btn:hover {
                background: #5a6268;
            }
            .results { 
                margin-top: 20px; 
                border: 1px solid #ddd; 
                border-radius: 6px;
                background: #fafafa;
                min-height: 100px;
            }
            .results-header {
                background: #f8f9fa;
                padding: 10px 15px;
                border-bottom: 1px solid #ddd;
                font-weight: bold;
                color: #495057;
            }
            .results-content {
                padding: 15px;
                max-height: 500px;
                overflow: auto;
            }
            table { 
                width: 100%; 
                border-collapse: collapse;
                background: white;
                font-size: 13px;
            }
            th, td { 
                border: 1px solid #ddd; 
                padding: 8px 12px; 
                text-align: left;
                word-break: break-word;
            }
            th { 
                background-color: #f8f9fa;
                font-weight: 600;
                position: sticky;
                top: 0;
            }
            tr:hover {
                background-color: #f5f5f5;
            }
            .error {
                color: #dc3545;
                background: #f8d7da;
                border: 1px solid #f5c6cb;
                border-radius: 4px;
                padding: 15px;
            }
            .success {
                color: #155724;
                background: #d4edda;
                border: 1px solid #c3e6cb;
                border-radius: 4px;
                padding: 15px;
            }
            .loading {
                text-align: center;
                padding: 40px;
                color: #6c757d;
            }
            .query-time {
                font-size: 12px;
                color: #6c757d;
                margin-left: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🏠 ClickHouse Query Interface</h1>
            
            <div class="query-section">
                <div class="query-header">
                    <label for="query"><strong>SQL Query:</strong></label>
                </div>
                
                <div class="query-examples">
                    <button class="example-btn" onclick="setQuery('SHOW TABLES')">SHOW TABLES</button>
                    <button class="example-btn" onclick="setQuery('SHOW DATABASES')">SHOW DATABASES</button>
                    <button class="example-btn" onclick="setQuery('SELECT version()')">VERSION</button>
                    <button class="example-btn" onclick="setQuery('SELECT * FROM system.numbers LIMIT 10')">SAMPLE DATA</button>
                    <button class="example-btn" onclick="setQuery('SELECT hostname(), now()')">SYSTEM INFO</button>
                </div>
                
                <textarea id="query" placeholder="Enter your SQL query here...">SHOW TABLES</textarea>
            </div>
            
            <div class="button-group">
                <button class="execute-btn" onclick="executeQuery()">▶️ Execute Query</button>
                <button class="clear-btn" onclick="clearResults()">🗑️ Clear Results</button>
                <span id="queryTime" class="query-time"></span>
            </div>
            
            <div class="results">
                <div class="results-header">Query Results</div>
                <div id="resultsContent" class="results-content">
                    <p style="color: #6c757d; text-align: center; margin: 40px 0;">Execute a query to see results here</p>
                </div>
            </div>
        </div>

        <script>
        function setQuery(query) {
            document.getElementById('query').value = query;
        }
        
        function clearResults() {
            document.getElementById('resultsContent').innerHTML = 
                '<p style="color: #6c757d; text-align: center; margin: 40px 0;">Execute a query to see results here</p>';
            document.getElementById('queryTime').textContent = '';
        }
        
        async function executeQuery() {
            const query = document.getElementById('query').value.trim();
            const resultsContent = document.getElementById('resultsContent');
            const queryTimeSpan = document.getElementById('queryTime');
            
            if (!query) {
                resultsContent.innerHTML = '<div class="error">Please enter a query</div>';
                return;
            }
            
            // Show loading
            resultsContent.innerHTML = '<div class="loading">🔄 Executing query...</div>';
            queryTimeSpan.textContent = '';
            
            const startTime = Date.now();
            
            try {
                // For local development, you might need to change this URL
                const clickhouseUrl = `http://${window.location.hostname}:8123/`;
                
                const response = await fetch('/api/query', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        query: query,
                        clickhouse_url: clickhouseUrl
                    })
                });
                
                const endTime = Date.now();
                const queryTime = endTime - startTime;
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                queryTimeSpan.textContent = `Query executed in ${queryTime}ms`;
                
                if (data.error) {
                    resultsContent.innerHTML = `<div class="error"><strong>Error:</strong> ${data.error}</div>`;
                    return;
                }
                
                if (data.data && data.data.length > 0) {
                    let html = '<table><thead><tr>';
                    data.meta.forEach(col => {
                        html += `<th>${col.name}<br><small style="font-weight:normal; color:#666;">${col.type}</small></th>`;
                    });
                    html += '</tr></thead><tbody>';
                    
                    data.data.forEach(row => {
                        html += '<tr>';
                        row.forEach(cell => {
                            html += `<td>${cell !== null ? cell : '<em style="color:#999;">NULL</em>'}</td>`;
                        });
                        html += '</tr>';
                    });
                    html += '</tbody></table>';
                    
                    html += `<p style="margin-top: 15px; color: #6c757d; font-size: 12px;">
                        ${data.rows} rows returned • ${data.statistics?.elapsed ? Math.round(data.statistics.elapsed * 1000) + 'ms' : queryTime + 'ms'} elapsed
                    </p>`;
                    
                    resultsContent.innerHTML = html;
                } else {
                    resultsContent.innerHTML = '<div class="success">✅ Query executed successfully. No data returned.</div>';
                }
                
            } catch (error) {
                const endTime = Date.now();
                const queryTime = endTime - startTime;
                queryTimeSpan.textContent = `Failed after ${queryTime}ms`;
                
                resultsContent.innerHTML = `<div class="error">
                    <strong>Connection Error:</strong><br>
                    ${error.message}<br><br>
                    <small>Make sure ClickHouse is running and accessible. For local development, you may need to set up a proxy or enable CORS.</small>
                </div>`;
            }
        }
        
        // Allow Ctrl+Enter to execute query
        document.getElementById('query').addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                executeQuery();
            }
        });
        </script>
    </body>
    </html>

  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        server {
            listen 80;
            server_name localhost;
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
            
            # Proxy API requests to a simple backend
            location /api/query {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                
                if ($request_method = 'OPTIONS') {
                    return 204;
                }
                
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
        }
    }

  app.js: |
    const express = require('express');
    const axios = require('axios');
    const app = express();
    
    app.use(express.json());
    
    app.post('/api/query', async (req, res) => {
        try {
            const { query } = req.body;
            const clickhouseUrl = 'http://clickhouse-service:8123/';
            
            const response = await axios.post(clickhouseUrl, query + ' FORMAT JSONCompact', {
                headers: {
                    'Content-Type': 'text/plain',
                    'Authorization': 'Basic ' + Buffer.from('default:clickhouse123').toString('base64')
                },
                timeout: 30000
            });
            
            res.json(response.data);
        } catch (error) {
            console.error('Query error:', error.message);
            res.status(500).json({ 
                error: error.response?.data || error.message 
            });
        }
    });
    
    app.listen(3000, () => {
        console.log('API server running on port 3000');
    });

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickhouse-play
  namespace: clickhouse
  labels:
    app: clickhouse-play
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clickhouse-play
  template:
    metadata:
      labels:
        app: clickhouse-play
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: play-html
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      - name: api
        image: node:18-alpine
        ports:
        - containerPort: 3000
        command: ["sh", "-c"]
        args: 
        - |
          npm init -y
          npm install express axios
          node /app/app.js
        volumeMounts:
        - name: app-js
          mountPath: /app
        workingDir: /tmp
      volumes:
      - name: play-html
        configMap:
          name: clickhouse-play-html
      - name: nginx-config
        configMap:
          name: clickhouse-play-html
      - name: app-js
        configMap:
          name: clickhouse-play-html

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-play-service
  namespace: clickhouse
spec:
  selector:
    app: clickhouse-play
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer